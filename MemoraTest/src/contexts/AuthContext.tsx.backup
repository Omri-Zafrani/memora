import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Platform } from 'react-native';
import { GoogleAuthService } from '../services/googleAuth';

interface User {
  id: string;
  name: string;
  email?: string;
  provider: 'device' | 'google' | 'apple';
  avatarUrl?: string;
}

interface AuthContextType {
  user: User | null;
  isLoading: boolean;
  signIn: (provider: 'device' | 'google' | 'apple', userData?: Partial<User>) => Promise<void>;
  signOut: () => Promise<void>;
  updateUser: (userData: Partial<User>) => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadStoredUser();
  }, []);

  const loadStoredUser = async () => {
    try {
      const storedUser = await AsyncStorage.getItem('user');
      if (storedUser) {
        const parsedUser = JSON.parse(storedUser);
        setUser(parsedUser);
      }
    } catch (error) {
      console.error('Error loading stored user:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const signIn = async (provider: 'device' | 'google' | 'apple', userData?: Partial<User>) => {
    try {
      let newUser: User;

      switch (provider) {
        case 'device':
          const deviceId = `device_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
          newUser = {
            id: deviceId,
            name: userData?.name || 'Guest User',
            provider: 'device',
          };
          break;
        case 'google':
          // Log the received user data for debugging
          console.log('Received Google user data:', userData);
          
          // Check if we have the minimum required data
          if (!userData?.name) {
            console.error('Missing name in Google user data:', userData);
            throw new Error('Google user data is incomplete: missing name');
          }
          
          // Generate a unique ID from email or use a fallback
          const googleId = userData.email 
            ? `google_${userData.email.replace(/[^a-zA-Z0-9]/g, '_')}`
            : `google_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
          
          newUser = {
            id: googleId,
            name: userData.name,
            email: userData.email || undefined,
            provider: 'google',
            avatarUrl: userData.avatarUrl,
          };
          
          console.log('Created Google user:', newUser);
          break;
        case 'apple':
          throw new Error('Apple Sign-In not implemented yet');
        default:
          throw new Error('Invalid provider');
      }

      await AsyncStorage.setItem('user', JSON.stringify(newUser));
      setUser(newUser);
    } catch (error) {
      console.error('Sign in error:', error);
      throw error;
    }
  };

  const signOut = async () => {
    try {
      // If user was signed in with Google, sign out from Google too
      if (user?.provider === 'google') {
        await GoogleAuthService.signOut();
      }
      
      await AsyncStorage.multiRemove(['user']);
      setUser(null);
    } catch (error) {
      console.error('Sign out error:', error);
      // Still clear local user data even if Google sign out fails
      await AsyncStorage.removeItem('user');
      setUser(null);
    }
  };

  const updateUser = async (userData: Partial<User>) => {
    if (!user) return;

    try {
      const updatedUser = { ...user, ...userData };
      await AsyncStorage.setItem('user', JSON.stringify(updatedUser));
      setUser(updatedUser);
    } catch (error) {
      console.error('Update user error:', error);
      throw error;
    }
  };

  const value: AuthContextType = {
    user,
    isLoading,
    signIn,
    signOut,
    updateUser,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}; 